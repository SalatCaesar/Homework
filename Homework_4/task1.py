# Напишите функцию which_triangle(a, b, c),
# На вход поступают длины трёх сторон треугольника: a, b, c
# Программа выводит какой это треугольник type_triangle: "Равносторонний", "Равнобедренный", "Обычный".
# Либо "Не треугольник", если по переданным параметрам невозможно построить треугольник
# Например 1, 1, 1 --> "Равносторонний"

def which_triangle(a, b, c):
    # Здесь нужно написать код
    q = (a, b, c)
    w = sorted(q)  # После этого самый большой катет окажется на последнем месте под индексом 2
    print(w)
    if w[2] >= w[0] + w[1]:  # Сумма двух наименьших катетов больше третьего катета
        type_triangle = 'Не треугольник'
    else:
        if w[0] == w[1] == w[2]:  # Проверям равенство сторон
            type_triangle = 'Равносторонний'
        else:
            if w[0] == w[1] or w[1] == w[2] or w[1] == w[2]:  # Проверяем равенство хотя бы двух сторон
                type_triangle = 'Равнобедренный'
            else:
                type_triangle = 'Обычный'  # Смиряемся, что он обычный
    return type_triangle

# Ниже НИЧЕГО НЕ НАДО ИЗМЕНЯТЬ


data = [
    (3, 3, 3),
    (1, 2, 2),
    (3, 4, 5),
    (3, 2, 3),
    (1, 2, 3)
]

test_data = [
    "Равносторонний", "Равнобедренный", "Обычный", "Равнобедренный", "Не треугольник"
]


for i, d in enumerate(data):
    assert which_triangle(*d) == test_data[i], f'С набором {d} есть ошибка, не проходит проверку'
    print(f'Тестовый набор {d} прошёл проверку')
print('Всё ок')